// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockinjectHttp is a mock of injectHttp interface
type MockinjectHttp struct {
	ctrl     *gomock.Controller
	recorder *MockinjectHttpMockRecorder
}

// MockinjectHttpMockRecorder is the mock recorder for MockinjectHttp
type MockinjectHttpMockRecorder struct {
	mock *MockinjectHttp
}

// NewMockinjectHttp creates a new mock instance
func NewMockinjectHttp(ctrl *gomock.Controller) *MockinjectHttp {
	mock := &MockinjectHttp{ctrl: ctrl}
	mock.recorder = &MockinjectHttpMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockinjectHttp) EXPECT() *MockinjectHttpMockRecorder {
	return m.recorder
}

// Store mocks base method
func (m *MockinjectHttp) Store(name string, urls []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", name, urls)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store
func (mr *MockinjectHttpMockRecorder) Store(name, urls interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockinjectHttp)(nil).Store), name, urls)
}
