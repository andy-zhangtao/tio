// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockinjectGrpc is a mock of injectGrpc interface
type MockinjectGrpc struct {
	ctrl     *gomock.Controller
	recorder *MockinjectGrpcMockRecorder
}

// MockinjectGrpcMockRecorder is the mock recorder for MockinjectGrpc
type MockinjectGrpcMockRecorder struct {
	mock *MockinjectGrpc
}

// NewMockinjectGrpc creates a new mock instance
func NewMockinjectGrpc(ctrl *gomock.Controller) *MockinjectGrpc {
	mock := &MockinjectGrpc{ctrl: ctrl}
	mock.recorder = &MockinjectGrpcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockinjectGrpc) EXPECT() *MockinjectGrpcMockRecorder {
	return m.recorder
}

// FetchServices mocks base method
func (m *MockinjectGrpc) FetchServices(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchServices", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchServices indicates an expected call of FetchServices
func (mr *MockinjectGrpcMockRecorder) FetchServices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchServices", reflect.TypeOf((*MockinjectGrpc)(nil).FetchServices), arg0)
}

// FetchMethods mocks base method
func (m *MockinjectGrpc) FetchMethods(arg0, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMethods", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMethods indicates an expected call of FetchMethods
func (mr *MockinjectGrpcMockRecorder) FetchMethods(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMethods", reflect.TypeOf((*MockinjectGrpc)(nil).FetchMethods), arg0, arg1)
}

// Store mocks base method
func (m *MockinjectGrpc) Store(name string, methods []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", name, methods)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store
func (mr *MockinjectGrpcMockRecorder) Store(name, methods interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockinjectGrpc)(nil).Store), name, methods)
}
